diff a/Caoching Demo 0.0.3/Assets/Scripts/Licensing/Controller/UnityLoginControl.cs b/Caoching Demo 0.0.3/Assets/Scripts/Licensing/Controller/UnityLoginControl.cs	(rejected hunks)
@@ -8,10 +8,14 @@
 
 using System;
 using System.Collections;
+using System.Collections.Generic;
 using System.Net;
+<<<<<<< HEAD
 using System.Net.Security;
 using System.Security.Cryptography.X509Certificates;
 using System.Text;
+=======
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
 using System.Threading;
 using Assets.Scripts.Licensing.Authentication;
 using Assets.Scripts.Licensing.Model;
@@ -38,8 +42,8 @@
         public LoginView LoginView;
         public Notify NotificationTemplate;
         private LoginController mLoginController;
-        private HeddokoClient mClient;
-        internal OnLoginSuccess LoginSuccessEvent;
+        private HeddokoClient mClient = new HeddokoClient();
+        internal OnLoginSuccess mLoginSuccessEvent;
         private Thread mConnectionThread;
         public Image LoadingIcon;
         private string mUrl;
@@ -52,6 +56,7 @@
 
        internal void Awake()
         {
+<<<<<<< HEAD
             mUrlExt = "api/v1";
             mUrl = "https://app.heddoko.com/";
             mSecret = "HEDFstcKsx0NHjPSsjcndjnckSDJjknCCSjcnsJSK89SJDkvVBrk";
@@ -70,29 +75,32 @@
             mLoginController.AddErrorHandler(LoginErrorType.NullLicense, DisplayErrorNotification);
             mLoginController.AddErrorHandler(LoginErrorType.NoNetworkConnectionFound, NoNetworkConnectionErrorHandler);
             mLoginController.AddErrorHandler(LoginErrorType.NullLicense, vX => EnableControls());
+=======
+            mLoginController = new LoginController();
+            mLoginController.Init(LoginModel, LoginView);
+            mLoginController.AddErrorHandler(LoginErrorType.CannotAuthenticate, DisplayErrorNotification);
+            mLoginController.AddErrorHandler(LoginErrorType.CannotAuthenticate, (x) => EnableControls());
+            mLoginController.AddErrorHandler(LoginErrorType.NullLicense, DisplayErrorNotification);
+            mLoginController.AddErrorHandler(LoginErrorType.NullLicense, (x) => EnableControls());
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
             mLoginController.AddErrorHandler(LoginErrorType.ZeroLengthPassword, LoginView.DisplayProblemWithPassword);
             mLoginController.AddErrorHandler(LoginErrorType.ZeroLengthUserName, LoginView.DisplayProblemWithUsername);
-            mLoginController.AddErrorHandler(LoginErrorType.Other, DisplayErrorNotification);
             mLoginController.AddLoginSubmissionHandler(SubmitLogin);
             OutterThreadToUnityThreadIntermediary.Instance.Init();
-
+            
         }
 
-        /// <summary>
-        /// No internet connection error handler. 
-        /// </summary>
-        /// <param name="vVmsg"></param>
-        private void NoNetworkConnectionErrorHandler(string vVmsg)
-        {
-            DisplayErrorNotification(vVmsg);
-            EnableControls();
-        }
 
 
         /// <summary>
         /// enable login controls
         /// </summary>
+<<<<<<< HEAD
         public void EnableControls()
+=======
+        /// <param name="vVmsg"></param>
+        private void EnableControls()
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
         {
             LoginView.EnableButtonControls();
         }
@@ -103,7 +111,7 @@
         /// <param name="vHandler">The handler to registers</param>
         public void RegisterOnLoginEvent(OnLoginSuccess vHandler)
         {
-            LoginSuccessEvent += vHandler;
+            mLoginSuccessEvent += vHandler;
         }
         /// <summary>
         /// Removes handler to user's on login success.
@@ -111,10 +119,14 @@
         /// <param name="vHandler">The handler to remove</param>
         public void RemoveOnLoginEvent(OnLoginSuccess vHandler)
         {
+<<<<<<< HEAD
             if (LoginSuccessEvent != null)
             {
                 LoginSuccessEvent -= vHandler;
             }
+=======
+            mLoginSuccessEvent -= vHandler;
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
         }
 
 
@@ -124,8 +136,12 @@
         /// <param name="vMsg"></param>
         void DisplayErrorNotification(string vMsg)
         {
+<<<<<<< HEAD
 
             Notify.Template("fade")
+=======
+            Notify.Template("FadingFadoutNotifyTemplate")
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
                 .Show(vMsg, customHideDelay: 5f, sequenceType: NotifySequence.First);
             OutterThreadToUnityThreadIntermediary.QueueActionInUnity(() => LoginView.SetLoadingIconAsActive(false));
 
@@ -147,12 +163,13 @@
         /// <returns></returns>
         IEnumerator VerifyInternetConnection(LoginModel vModel)
         {
-            WWW vWww = new WWW("http://google.com");
-            yield return vWww;
-            if (vWww.error != null)
+            WWW www = new WWW("http://google.com");
+            yield return www;
+            if (www.error != null)
             {
                 //error: no internet connection
                 mLoginController.RaiseErrorEvent(LoginErrorType.NoNetworkConnectionFound, "A connection to the internet could not be established. Try again by clicking on the submit button");
+
             }
             else
             {
@@ -168,7 +185,6 @@
         /// <param name="vModel">The login model to submit</param>
         private void SubmitLoginInfo(LoginModel vModel)
         {
-            bool vIsHandled = false;
             try
             {
                 UserRequest vRequest = vModel.UserRequest;
@@ -186,25 +202,29 @@
                 }
                 LicenseInfo vLicense = vUser.LicenseInfo;
                 mClient.SetToken(vUser.Token);
-                ResultBool vCheck = mClient.Check();
-                User vProfile = mClient.Profile();
-                if (vCheck.Result)
+                ResultBool check = mClient.Check();
+                User profile = mClient.Profile();
+                if (check.Result)
                 {
                     UserProfileModel vProfileModel = new UserProfileModel()
                     {
-                        User = vProfile,
+                        User = profile,
                         LicenseInfo = vLicense
                     };
-                    if (LoginSuccessEvent != null)
+                    if (mLoginSuccessEvent != null)
                     {
+<<<<<<< HEAD
                         OutterThreadToUnityThreadIntermediary.QueueActionInUnity(() => LoginSuccessEvent(vProfileModel));
                         OutterThreadToUnityThreadIntermediary.QueueActionInUnity(
                             () => LoginView.SetLoadingIconAsActive(false));
+=======
+                        OutterThreadToUnityThreadIntermediary.QueueActionInUnity(() => mLoginSuccessEvent(vProfileModel));
+                        OutterThreadToUnityThreadIntermediary.QueueActionInUnity(()=> LoadingIcon.gameObject.SetActive(false));
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
                     }
                 }
 
             }
-
             catch (WebException vWebException)
             {
                 switch (vWebException.Status)
@@ -218,41 +238,29 @@
                                 switch (vWebResponse.StatusCode)
                                 {
                                     case HttpStatusCode.NotFound:
-                                        vIsHandled = true;
-                                        OutterThreadToUnityThreadIntermediary.QueueActionInUnity(
-                                            () =>
-                                                mLoginController.RaiseErrorEvent(LoginErrorType.HttpStatus404,
-                                                    "Please contact support and inform them of error 404"));
+                                        OutterThreadToUnityThreadIntermediary.QueueActionInUnity(() =>
+                                        mLoginController.RaiseErrorEvent(LoginErrorType.HttpStatus404,
+                                        "Please contact support and inform them of error 404"));
                                         break;
                                     case HttpStatusCode.Unauthorized:
                                         OutterThreadToUnityThreadIntermediary.QueueActionInUnity(
                                             () =>
                                                 mLoginController.RaiseErrorEvent(LoginErrorType.CannotAuthenticate,
                                                     "Invalid user name and/or password."));
-                                        vIsHandled = true;
                                         break;
                                     default:
-                                        vIsHandled = true;
                                         OutterThreadToUnityThreadIntermediary.QueueActionInUnity(
-                                            () =>
-                                                mLoginController.RaiseErrorEvent(LoginErrorType.Other,
-                                                    "There was a problem trying to reach the server. Please report to support with error code " +
-                                                    vWebResponse.StatusCode));
+                                           () =>
+                                               mLoginController.RaiseErrorEvent(LoginErrorType.Other,
+                                               "There was a problem trying to reach the server. Please report to support with error code " + vWebResponse.StatusCode));
                                         break;
                                 }
                             }
-                            if (!vIsHandled)
-                            {
-                                OutterThreadToUnityThreadIntermediary.QueueActionInUnity(
-                                    () =>
-                                        mLoginController.RaiseErrorEvent(LoginErrorType.Other,
-                                            "There was a problem trying to reach the server. Please report to support with error code " +
-                                            vWebException));
-                            }
                         }
                         break;
                 }
             }
+<<<<<<< HEAD
 
         }
 
@@ -314,9 +322,11 @@
             vBuilder.Append("\nClick \"Yes\" to launch your browser and log into Heddoko for further details. ");
             return vBuilder.ToString();
         }
-
-    }
+=======
+        }
 
 
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
 
+    }
 }
\ No newline at end of file
