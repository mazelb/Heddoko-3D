diff a/Caoching Demo 0.0.3/Assets/Scripts/Body Pipeline/Analysis/AnalysisModels/Arms/LeftArmAnalysis.cs b/Caoching Demo 0.0.3/Assets/Scripts/Body Pipeline/Analysis/AnalysisModels/Arms/LeftArmAnalysis.cs	(rejected hunks)
@@ -14,28 +14,44 @@
     * LeftArmAnalysis class 
     * @brief LeftArmAnalysis class 
     */
-    [Serializable ]
+    [Serializable]
     public class LeftArmAnalysis : ArmAnalysis
     {
         //Elbow Angles
+<<<<<<< HEAD
         [Analysis(IgnoreAttribute = false, AttributeName = "LElbow F/E")]
         public float AngleElbowFlexion = 0;
         [Analysis(IgnoreAttribute = false, AttributeName = "LShould F/E")]
         public float SignedShoulderFlexion=0;
           public float SignedAngleElbowFlexion = 0;
         [Analysis(IgnoreAttribute = true)]
+=======
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Elbow Flexion")]
+        public float AngleElbowFlexion = 0;
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Signed Elbow Flexion")]
+        public float SignedAngleElbowFlexion = 0;
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Elbow Pronation")]
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
         public float AngleElbowPronation = 0;
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Elbow Adduction")]
+        public float SignedAngleElbowAdduction = 0;
+        [Analysis(IgnoreAttribute = false, AttributeName = "Signed Left Shoulder Flexion")]
+        public float SignedAngleShoulderFlexion = 0;
 
         //Upper Arm Angles
-        [Analysis(IgnoreAttribute = true)]
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Shoulder Flexion")]
         public float AngleShoulderFlexion = 0;
-        [Analysis(IgnoreAttribute = true)]
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Shoulder Vertical Abduction")]
         public float AngleShoulderVertAbduction = 0;
+<<<<<<< HEAD
         [Analysis(IgnoreAttribute = false, AttributeName = "LShould Add/Abd")] 
         public float SignedShoulderVerticalAbduction=0;
         [Analysis(IgnoreAttribute = true)]
+=======
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Shoulder Horizontal Abduction")]
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
         public float AngleShoulderHorAbduction = 0;
-        [Analysis(IgnoreAttribute = true)]
+        [Analysis(IgnoreAttribute = false, AttributeName = "Left Shoulder Rotation")]
         public float AngleShoulderRotation = 0;
 
         //Velocities and Accelerations
@@ -50,8 +66,10 @@
         [Analysis(IgnoreAttribute = true)]
         public float AngularAccelerationElbowPronation = 0;
         [Analysis(IgnoreAttribute = true)]
+
         public float AngularVelocityShoulderFlexion = 0;
         [Analysis(IgnoreAttribute = true)]
+
         public float AngularAccelerationShoulderFlexion = 0;
         [Analysis(IgnoreAttribute = true)]
         public float AngularVelocityShoulderVertAbduction = 0;
@@ -65,7 +83,7 @@
         public float AngularVelocityShoulderRotation = 0;
         [Analysis(IgnoreAttribute = true)]
         public float AngularAccelerationShoulderRotation = 0;
- 
+
         /// <summary>
         /// Reset the metrics calculations
         /// </summary>
@@ -73,7 +91,7 @@
         {
             PeakAngularVelocityElbowFlexion = 0;
         }
-
+ 
 
         /// <summary>
         /// Extract angles from orientations
@@ -84,7 +102,7 @@
             // Time.time - mLastTimeCalled;
             if (DeltaTime == 0)
             {
-                return;
+                 return;
             }
             //mLastTimeCalled = Time.time;
 
@@ -99,23 +117,49 @@
             vTorsoAxisForward = TorsoTransform.forward;
 
             vShoulderAxisUp = UpArTransform.up;
-            vShoulderAxisRight = UpArTransform.right;
+            vShoulderAxisRight = -UpArTransform.right;
             vShoulderAxisForward = UpArTransform.forward;
 
             vElbowAxisUp = LoArTransform.up;
-            vElbowAxisRight = LoArTransform.right;
+            vElbowAxisRight = -LoArTransform.right;
             vElbowAxisForward = LoArTransform.forward;
 
+
             //calculate the Elbow Flexion angle
+
             Vector3 vProjectedShoulderAxisRight = Vector3.ProjectOnPlane(vShoulderAxisRight, vShoulderAxisForward);
             Vector3 vProjectedElbowAxisRight = Vector3.ProjectOnPlane(vElbowAxisRight, vShoulderAxisForward);
-            float vAngleElbowFlexionNew = Vector3.Angle(vProjectedShoulderAxisRight, vProjectedElbowAxisRight);
+            float vAngleElbowFlexionNew = Vector3.Angle(vElbowAxisRight, vProjectedElbowAxisRight);
             float vAngularVelocityElbowFlexionNew = (vAngleElbowFlexionNew - AngleElbowFlexion) / DeltaTime;
             AngularAccelerationElbowFlexion = (vAngularVelocityElbowFlexionNew - AngularVelocityElbowFlexion) / DeltaTime;
             AngularVelocityElbowFlexion = vAngularVelocityElbowFlexionNew;
             PeakAngularVelocityElbowFlexion = Mathf.Max(Mathf.Abs(AngularVelocityElbowFlexion), PeakAngularVelocityElbowFlexion);
             AngleElbowFlexion = vAngleElbowFlexionNew;
-            SignedAngleElbowFlexion = GetSignedAngle(vElbowAxisRight, vShoulderAxisRight, vElbowAxisUp.normalized);
+
+
+            //   Vector3 vProjection = Vector3.ProjectOnPlane(vShoulderAxisRight, vTorsoAxisRight);
+            float vAngleSignedAngleShoulderFlexion = Vector3.Angle(-vTorsoAxisUp, vShoulderAxisRight);// Vector3.Angle(-vTorsoAxisUp, vProjection);
+            //Vector3 vCross = Vector3.Cross(-vTorsoAxisUp, vProjection);
+            float vSignShoulderFlexion = 1;//Mathf.Sign(Vector3.Dot(vTorsoAxisRight, vCross));
+            SignedAngleShoulderFlexion = vSignShoulderFlexion * vAngleSignedAngleShoulderFlexion;
+
+
+            Vector3 vProjection = Vector3.ProjectOnPlane(vShoulderAxisRight, -vTorsoAxisRight);
+            float vAngle = Vector3.Angle(-vTorsoAxisUp, vProjection);
+            Vector3 vCross = Vector3.Cross(vProjection ,-vTorsoAxisUp);
+            float vSign = Mathf.Sign(Vector3.Dot(vTorsoAxisRight, vCross));
+            SignedAngleElbowFlexion = vSign * vAngle;
+
+
+            //Signed angle adduction calculation
+            Vector3 vAductionprojection = Vector3.ProjectOnPlane(vShoulderAxisRight, vTorsoAxisForward);
+            float vAductionAngle = Vector3.Angle(-vTorsoAxisUp, vAductionprojection);
+            Vector3 vAductionCross = Vector3.Cross(vAductionprojection  ,- vTorsoAxisUp);
+            float vAductionSign = Mathf.Sign(Vector3.Dot(vTorsoAxisForward, vAductionCross));
+            SignedAngleElbowAdduction = vAductionSign * vAductionAngle;
+            //  SignedAngleElbowFlexion = GetSignedAngle( vShoulderAxisRight, vElbowAxisRight,vElbowAxisUp.normalized);
+
+            //= GetSignedAngle(vShoulderAxisRight, vElbowAxisRight, vElbowAxisUp.normalized);
 
             //calculate the Elbow Pronation angle
             float vAngleElbowPronationNew = 180 - Mathf.Abs(180 - LoArTransform.rotation.eulerAngles.x);
@@ -124,29 +168,20 @@
             AngularVelocityPronation = vAngularVelocityElbowPronationNew;
             AngleElbowPronation = vAngleElbowPronationNew;
 
-            //calculate the Shoulder Flexion angle
-            Vector3 vShoulderProjectionOntoTorsoRight = Vector3.ProjectOnPlane(-vShoulderAxisRight, vTorsoAxisRight);
 
-            float vAngleShoulderFlexionNew = Vector3.Angle(-vTorsoAxisUp, vShoulderProjectionOntoTorsoRight);
+            //calculate the Shoulder Flexion angle
+            float vAngleShoulderFlexionNew = Vector3.Angle(-vTorsoAxisUp, Vector3.ProjectOnPlane(vShoulderAxisRight, vTorsoAxisRight));
             float vAngularVelocityShoulderFlexionNew = (vAngleShoulderFlexionNew - Mathf.Abs(AngleShoulderFlexion)) / DeltaTime;
             AngularAccelerationShoulderFlexion = (vAngularVelocityShoulderFlexionNew - AngularVelocityShoulderFlexion) / DeltaTime;
             AngularVelocityShoulderFlexion = vAngularVelocityShoulderFlexionNew;
             AngleShoulderFlexion = vAngleShoulderFlexionNew;
-            //set the the signed component
-            Vector3 vFlexCrossPrdct = Vector3.Cross(vTorsoAxisRight, vShoulderProjectionOntoTorsoRight);
-            float vFlexSign = Mathf.Sign(Vector3.Dot(-vTorsoAxisUp, vFlexCrossPrdct));
-            SignedShoulderFlexion = vFlexSign * AngleShoulderFlexion;
 
             //calculate the Shoulder Abduction Vertical angle
-            Vector3 vVerticalShoulderAbdProjection = Vector3.ProjectOnPlane(-vShoulderAxisRight, vTorsoAxisForward);
-            float vAngleShoulderVertAbductionNew = Vector3.Angle(-vTorsoAxisUp,vVerticalShoulderAbdProjection );
+            float vAngleShoulderVertAbductionNew = Vector3.Angle(-vTorsoAxisUp, Vector3.ProjectOnPlane(vShoulderAxisRight, vTorsoAxisForward));
             float vAngularVelocityShoulderVertAbductionNew = (vAngleShoulderVertAbductionNew - Mathf.Abs(AngleShoulderVertAbduction)) / DeltaTime;
             AngularAccelerationShoulderVertAbduction = (vAngularVelocityShoulderVertAbductionNew - AngularVelocityShoulderVertAbduction) / DeltaTime;
             AngularVelocityShoulderVertAbduction = vAngularVelocityShoulderVertAbductionNew;
             AngleShoulderVertAbduction = vAngleShoulderVertAbductionNew;
-            Vector3 vVertAbductionCrossPrdct = Vector3.Cross(vTorsoAxisForward, vVerticalShoulderAbdProjection);
-            float vVertAbductionSign = Mathf.Sign(Vector3.Dot(-vTorsoAxisUp, vVertAbductionCrossPrdct));
-            SignedShoulderVerticalAbduction = vVertAbductionSign * AngleShoulderVertAbduction;
 
             //calculate the Shoulder Abduction Horizontal angle
             float vAngleShoulderHorAbductionNew = Vector3.Angle(vTorsoAxisForward, Vector3.ProjectOnPlane(vShoulderAxisRight, vTorsoAxisUp));
@@ -161,7 +196,11 @@
             AngularAccelerationShoulderRotation = (vAngularVelocityShoulderRotationNew - AngularVelocityShoulderRotation) / DeltaTime;
             AngularVelocityShoulderRotation = vAngularVelocityShoulderRotationNew;
             AngleShoulderRotation = vAngleShoulderRotationNew;
+<<<<<<< HEAD
             NotifyAnalysisCompletionListeners();
+=======
+            NotifyArmAnalysisCompletion();
+>>>>>>> 096bb2ae014b51e65bce63c5e77e735a22c23b39
         }
     }
-}
\ No newline at end of file
+}
